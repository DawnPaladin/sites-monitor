{"version":3,"sources":["Diamond.jsx","System.jsx","JenkinsLog.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Diamond","jenkinsClassName","this","props","buildResult","react_default","a","createElement","className","React","Component","serviceColor","up","down","System","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","servers","system","formatTimeAgo","bind","assertThisInitialized","notTooLongAgo","timestamp","isNaN","seconds","Math","floor","Date","interval","concat","valueOf","_this2","map","server","serverColors","operational_status","key","id","title","jenkinsBuilds","diamond","jenkinsJobs","length","Diamond_Diamond","builds","result","job","buildVizClasses","debugJenkins","name","status","resultText","SUCCESS","FAILURE","ABORTED","JenkinsLog","jenkinsLogEntries","timestamps","jobsByTimestamp","build","enable","disable","out-of-service-health","App","groups","serviceStats","serverStats","disabled","downedServices","timeSinceLastUpdate","networkText","fetchLoopController","checkIfServiceIsDown","getLoadBalancerStatus","getJenkinsStatus","processLoadBalancerData","processJenkinsData","handleNetworkErr","start","setState","networkStatus","Promise","all","then","response","_response","slicedToArray","loadBalancerData","jenkinsData","error","fetchLoop","setInterval","tick","stop","clearInterval","updateFrequency","service","serversDown","threshold","parseInt","minimum_notificate_real_server","forEach","_this3","fetch","ok","json","callback","_this4","replaceUnderscores","string","replace","loading","data","sort","groupA","groupB","nameA","toUpperCase","nameB","group","virtual_services","toConsumableArray","console","warn","_this5","jobs","unmatchedJobs","textInBrackets","_loop","pop","jobMatched","color","matches","regexResults","exec","description","push","serviceIdInJobDescription","some","phrase","arr","split","lastWord","join","parenthesizeLastWord","reverse","slice","err","message","index","App_Group","App_DownedService","progressbarPercentage","onClick","dist_default","percentage","styles","path","stroke","strokeWidth","strokeLinecap","strokeDasharray","trail","JenkinsLog_JenkinsLog","Group","systems","System_System","DownedService","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c66a6d56.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Used in the System component and the Jenkins build log */\r\nexport default class Diamond extends React.Component {\r\n\tstatic propTypes = {\r\n\t\tbuildResult: PropTypes.string.isRequired,\r\n\t}\r\n\trender() {\r\n\t\tlet jenkinsClassName = \"diamond\";\r\n\t\tif      (this.props.buildResult === \"SUCCESS\") jenkinsClassName += \" green\";\r\n\t\telse if (this.props.buildResult === \"FAILURE\") jenkinsClassName += \" red\";\r\n\t\telse jenkinsClassName += \" grey\";\r\n\t\t\r\n\t\treturn <div className={jenkinsClassName}></div>;\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Diamond from './Diamond';\r\n\r\nconst serviceColor = {\r\n\tup: \"green\",\r\n\tdown: \"red\",\r\n}\r\n/** Visualizes a service (site) which is kept live by one or more servers. Member of a Group. */\r\nexport default class System extends Component {\r\n\tstatic propTypes = {\r\n\t\tsystem: PropTypes.shape({\r\n\t\t\tservers: PropTypes.arrayOf(PropTypes.shape({\r\n\t\t\t\tid: PropTypes.string.isRequired,\r\n\t\t\t\toperational_status: PropTypes.string.isRequired,\r\n\t\t\t})).isRequired,\r\n\t\t\tid: PropTypes.string.isRequired,\r\n\t\t\tstatus: PropTypes.string, // should be present, but not on first render\r\n\t\t\tjenkinsJobs: PropTypes.arrayOf(PropTypes.shape({\r\n\t\t\t\tbuilds: PropTypes.arrayOf(PropTypes.shape({\r\n\t\t\t\t\tresult: PropTypes.string.isRequired,\r\n\t\t\t\t\ttimestamp: PropTypes.number.isRequired\r\n\t\t\t\t})).isRequired,\r\n\t\t\t})), // jenkinsJobs are not required\r\n\t\t}).isRequired,\r\n\t\tdebugJenkins: PropTypes.bool, // not required\r\n\t\tserverColors: PropTypes.shape({\r\n\t\t\tenable: PropTypes.string.isRequired,\r\n\t\t\tdisable: PropTypes.string.isRequired,\r\n\t\t}).isRequired,\r\n\t}\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tservers: this.props.system.servers,\r\n\t\t}\r\n\t\tthis.formatTimeAgo = this.formatTimeAgo.bind(this);\r\n\t\tthis.notTooLongAgo = this.notTooLongAgo.bind(this);\r\n\t}\r\n\tformatTimeAgo(timestamp) {\r\n\t\tif (isNaN(timestamp)) return '';\r\n\t\t\r\n\t\tvar seconds = Math.floor((new Date() - timestamp) / 1000);\r\n\t\t\r\n\t\t// hours\r\n\t\tvar interval = Math.floor(seconds / 3600);\r\n\t\tif (interval > 0) return `${interval}h`;\r\n\t\t// minutes\r\n\t\tinterval = Math.floor(seconds / 60);\r\n\t\tif (interval > 0) return `${interval}m`;\r\n\t\t// seconds\r\n\t\treturn `${seconds}s`;\r\n\t}\r\n\tnotTooLongAgo(timestamp) {\r\n\t\tvar now = new Date();\r\n\t\tvar currentTimestamp = now.valueOf();\r\n\t\tconst eightHours = 1000 * 60 * 60 * 8;\r\n\t\treturn (currentTimestamp - timestamp) < eightHours;\r\n\t}\r\n\trender() {\r\n\t\tvar servers = this.props.system.servers.map(server => (\r\n\t\t\t<div \r\n\t\t\t\tclassName={ \"rect \" + this.props.serverColors[server.operational_status]}\r\n\t\t\t\tserver={server}\r\n\t\t\t\tkey={server.id}\r\n\t\t\t\ttitle={server.id}\r\n\t\t\t></div>\r\n\t\t));\r\n\t\t\r\n\t\tvar jenkinsBuilds = [];\r\n\t\tvar diamond = null;\r\n\t\tif (this.props.system.jenkinsJobs && this.props.system.jenkinsJobs.length) {\r\n\t\t\tdiamond = <Diamond buildResult={this.props.system.jenkinsJobs[0].builds[0].result} />\r\n\t\t\t\r\n\t\t\tjenkinsBuilds = this.props.system.jenkinsJobs.map(job => {\r\n\t\t\t\tvar buildVizClasses = \"build-viz\";\r\n\t\t\t\tif (job.builds[0].result === \"SUCCESS\") buildVizClasses += \" green-text\";\r\n\t\t\t\tif (job.builds[0].result === \"FAILURE\") buildVizClasses += \" red-text\";\r\n\t\t\t\tif (this.notTooLongAgo(job.builds[0].timestamp) || this.props.debugJenkins) {\r\n\t\t\t\t\treturn (<div className={buildVizClasses} key={job.name} title={\"Jenkins job: \" + job.name}>\r\n\t\t\t\t\t\t{this.formatTimeAgo(job.builds[0].timestamp)}\r\n\t\t\t\t\t</div>);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className=\"system\">\r\n\t\t\t\t<div title={this.props.system.id} className={\"circle \" + serviceColor[this.props.system.status]}></div>\r\n\t\t\t\t<div className=\"rects\">\r\n\t\t\t\t\t{servers}\r\n\t\t\t\t</div>\r\n\t\t\t\t{diamond}\r\n\t\t\t\t<div className=\"builds\">\r\n\t\t\t\t\t{jenkinsBuilds}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Diamond from './Diamond';\r\n\r\nconst resultText = { \r\n\t\"SUCCESS\": \"succeeded\",\r\n\t\"FAILURE\": \"failed\",\r\n\t\"ABORTED\": \"aborted\",\r\n}\r\n\r\nexport default class JenkinsLog extends React.Component {\r\n\tstatic propTypes = {\r\n\t\ttimestamps: PropTypes.array.isRequired,\r\n\t\tjobsByTimestamp: PropTypes.object.isRequired,\r\n\t}\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.formatTimeAgo = this.formatTimeAgo.bind(this);\r\n\t}\r\n\tformatTimeAgo(timestamp) {\r\n\t\tif (isNaN(timestamp)) return '';\r\n\t\t\r\n\t\tvar seconds = Math.floor((new Date() - timestamp) / 1000);\r\n\t\t\r\n\t\t// days\r\n\t\tvar interval = Math.floor(seconds / 86400 );\r\n\t\tif (interval === 1) return `1 day ago`\r\n\t\tif (interval > 1) return `${interval} days ago`\r\n\t\t// hours\r\n\t\tinterval = Math.floor(seconds / 3600);\r\n\t\tif (interval === 1) return `1 hour ago`;\r\n\t\tif (interval > 1) return `${interval} hours ago`;\r\n\t\t// minutes\r\n\t\tinterval = Math.floor(seconds / 60);\r\n\t\tif (interval === 1) return `1 minute ago`;\r\n\t\tif (interval > 1) return `${interval} minutes ago`;\r\n\t\t// seconds\r\n\t\treturn `${seconds} seconds ago`;\r\n\t}\r\n\trender() {\r\n\t\tvar jenkinsLogEntries = this.props.timestamps.map(timestamp => {\r\n\t\t\tlet job = this.props.jobsByTimestamp[timestamp];\r\n\t\t\tlet build = job.builds[0];\r\n\t\t\t\r\n\t\t\treturn (<div key={timestamp} className=\"log-line\">\r\n\t\t\t\t<Diamond buildResult={build.result} />\r\n\t\t\t\t{job.name} {resultText[build.result]} {this.formatTimeAgo(timestamp)}\r\n\t\t\t</div>);\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<div className=\"jenkins-log\">\r\n\t\t\t\t<h2>Jenkins build log</h2>\r\n\t\t\t\t{ jenkinsLogEntries }\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport CircularProgressbar from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport './App.scss';\r\nimport System from './System';\r\nimport JenkinsLog from './JenkinsLog';\r\n\r\nconst loadBalancerUrl = \"/load-balancer.php\";\r\nconst jenkinsUrl = \"/jenkins.php\";\r\nconst updateFrequency = 30; // seconds to wait between data refreshes\r\nconst numJenkinsBuildsToShow = 15;\r\nconst simulateDownedService = false;\r\nconst debugJenkins = false;\r\nconst serverColors = {\r\n\tenable: \"green\",\r\n\tdisable: \"grey\",\r\n\t\"out-of-service-health\": \"red\"\r\n}\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tgroups: [],\r\n\t\t\tserviceStats: {\r\n\t\t\t\tup: 0,\r\n\t\t\t\tdown: 0,\r\n\t\t\t},\r\n\t\t\tserverStats: {\r\n\t\t\t\tup: 0,\r\n\t\t\t\tdisabled: 0,\r\n\t\t\t\tdown: 0,\r\n\t\t\t},\r\n\t\t\tdownedServices: [],\r\n\t\t\ttimeSinceLastUpdate: 0,\r\n\t\t\tnetworkText: \"Loading...\",\r\n\t\t\tjobsByTimestamp: {},\r\n\t\t\ttimestamps: [],\r\n\t\t};\r\n\t\tthis.fetchLoopController = this.fetchLoopController.bind(this);\r\n\t\tthis.checkIfServiceIsDown = this.checkIfServiceIsDown.bind(this);\r\n\t\tthis.getLoadBalancerStatus = this.getLoadBalancerStatus.bind(this);\r\n\t\tthis.getJenkinsStatus = this.getJenkinsStatus.bind(this);\r\n\t\tthis.processLoadBalancerData = this.processLoadBalancerData.bind(this);\r\n\t\tthis.processJenkinsData = this.processJenkinsData.bind(this);\r\n\t\tthis.handleNetworkErr = this.handleNetworkErr.bind(this);\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tthis.fetchLoopController().start();\r\n\t}\r\n\tfetchLoopController() {\r\n\t\tconst start = () => {\r\n\t\t\tthis.setState({ networkStatus: \"loading\" });\r\n\t\t\tPromise.all([ this.getLoadBalancerStatus(), this.getJenkinsStatus() ]).then((response) => {\r\n\t\t\t\tconst [ loadBalancerData, jenkinsData ] = response;\r\n\t\t\t\tthis.processLoadBalancerData(loadBalancerData, () => {\r\n\t\t\t\t\tthis.processJenkinsData(jenkinsData);\r\n\t\t\t\t});\r\n\t\t\t}, (error) => { \r\n\t\t\t\tthis.handleNetworkErr(error);\r\n\t\t\t}).then(() => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tfetchLoop: setInterval(tick, 1000),\r\n\t\t\t\t\ttimeSinceLastUpdate: 0,\r\n\t\t\t\t\tnetworkStatus: \"waiting\",\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\tconst stop = () => {\r\n\t\t\tclearInterval(this.state.fetchLoop);\r\n\t\t\tthis.setState({\r\n\t\t\t\ttimeSinceLastUpdate: 0,\r\n\t\t\t\tnetworkStatus: \"stopped\"\r\n\t\t\t});\r\n\t\t}\r\n\t\tconst tick = () => {\r\n\t\t\tif (this.state.timeSinceLastUpdate > updateFrequency - 1) {\r\n\t\t\t\tstop();\r\n\t\t\t\tstart();\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({ timeSinceLastUpdate: this.state.timeSinceLastUpdate + 1 });\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { start, stop }\r\n\t}\r\n\tcheckIfServiceIsDown(service) {\r\n\t\tlet serversDown = 0;\r\n\t\tlet threshold = parseInt(service.minimum_notificate_real_server);\r\n\t\tservice.servers.forEach(server => {\r\n\t\t\tif (server.operational_status === 'out-of-service-health') serversDown += 1;\r\n\t\t});\r\n\t\treturn serversDown > 0 && serversDown >= threshold;\r\n\t}\r\n\tgetLoadBalancerStatus() {\r\n\t\treturn fetch(loadBalancerUrl)\r\n\t\t\t.then(response => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.handleNetworkErr(response);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t;\r\n\t}\r\n\tprocessLoadBalancerData(json, callback) {\r\n\t\tconst replaceUnderscores = string => string.replace(/_/g, ' ');\r\n\t\tthis.setState({ loading: true });\r\n\r\n\t\tvar groups = json.data;\r\n\t\tgroups.sort((groupA, groupB) => {\r\n\t\t\tvar nameA = groupA.id.toUpperCase();\r\n\t\t\tvar nameB = groupB.id.toUpperCase();\r\n\t\t\tif (nameA < nameB) return -1;\r\n\t\t\tif (nameA > nameB) return 1;\r\n\t\t\treturn 0;\r\n\t\t});\r\n\t\tgroups.forEach(group => {\r\n\t\t\tgroup.id = replaceUnderscores(group.id);\r\n\t\t\tgroup.virtual_services.forEach(service => {\r\n\t\t\t\tservice.id = replaceUnderscores(service.id);\r\n\t\t\t});\r\n\t\t});\r\n\t\tif (debugJenkins) console.log(groups);\r\n\t\tthis.setState({groups: groups});\r\n\r\n\t\tvar serviceStats = {\r\n\t\t\tup: 0,\r\n\t\t\tdown: 0,\r\n\t\t}\r\n\t\tvar serverStats = {\r\n\t\t\tup: 0,\r\n\t\t\tdisabled: 0,\r\n\t\t\tdown: 0,\r\n\t\t}\r\n\t\tthis.setState({ downedServices: [] });\r\n\t\tif (simulateDownedService) groups[8].virtual_services[2].servers[1].operational_status = \"out-of-service-health\";\r\n\t\tgroups.forEach(group => {\r\n\t\t\tgroup.virtual_services.forEach(service => {\r\n\t\t\t\tif (this.checkIfServiceIsDown(service)) {\r\n\t\t\t\t\tservice.status = \"down\";\r\n\t\t\t\t\tserviceStats.down += 1;\r\n\t\t\t\t\tthis.setState({ downedServices: [...this.state.downedServices, service] });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tservice.status = \"up\";\r\n\t\t\t\t\tserviceStats.up += 1;\r\n\t\t\t\t}\r\n\t\t\t\tservice.jenkinsJobs = [];\r\n\t\t\t\tservice.servers.forEach(server => {\r\n\t\t\t\t\tif (server.operational_status === \"enable\") { serverStats.up += 1; } \r\n\t\t\t\t\telse if (server.operational_status === \"disable\") { serverStats.disabled += 1; }\r\n\t\t\t\t\telse if (server.operational_status === \"out-of-service-health\") { serverStats.down += 1; }\r\n\t\t\t\t\telse { console.warn(\"Unexpected server status\", server.operational_status); }\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t\t\t\r\n\t\tthis.setState({ serviceStats: serviceStats, serverStats: serverStats }, callback);\r\n\t}\r\n\tgetJenkinsStatus() {\r\n\t\treturn fetch(jenkinsUrl)\r\n\t\t.then(response => {\r\n\t\t\tif (response.ok) {\r\n\t\t\t\treturn response.json();\r\n\t\t\t} else {\r\n\t\t\t\tthis.handleNetworkErr(response);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tprocessJenkinsData(jobs) {\r\n\t\tconst parenthesizeLastWord = phrase => { // put parens around the last word in a phrase\r\n\t\t\tlet arr = phrase.split(' ');\r\n\t\t\tlet lastWord = arr.pop();\r\n\t\t\tarr.push(`(${lastWord})`);\r\n\t\t\treturn arr.join(' ');\r\n\t\t}\r\n\t\t// match jobs from Jenkins with services from Load Balancer\r\n\t\tthis.setState(function(state) {\r\n\t\t\tconst groups = state.groups;\r\n\t\t\tconst unmatchedJobs = [];\r\n\t\t\tconst textInBrackets = /\\[(.+?)\\]/g;\r\n\t\t\tlet jobsMatched = 0;\r\n\t\t\tstate.timestamps = [];\r\n\t\t\twhile (jobs.length > 0) {\r\n\t\t\t\tconst job = jobs.pop();\r\n\t\t\t\tlet jobMatched = false;\r\n\t\t\t\tif (job.color === \"disabled\") continue;\r\n\t\t\t\tgroups.forEach(group => { // eslint-disable-line\r\n\t\t\t\t\tgroup.virtual_services.forEach(service => {\r\n\t\t\t\t\t\tlet matches;\r\n\t\t\t\t\t\tconst regexResults = [];\r\n\t\t\t\t\t\twhile (matches = textInBrackets.exec(job.description)) { // eslint-disable-line\r\n\t\t\t\t\t\t\tregexResults.push(matches[1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst serviceIdInJobDescription = regexResults && regexResults.some(result => result === service.id);\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tjob.name === service.id || \r\n\t\t\t\t\t\t\tjob.name === parenthesizeLastWord(service.id) || \r\n\t\t\t\t\t\t\tjob.name === service.id.replace('UAT', 'Staging') ||\r\n\t\t\t\t\t\t\tjob.name === service.id.replace('UAT', '(Staging)') || \r\n\t\t\t\t\t\t\tserviceIdInJobDescription \r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t// console.log(\"Matched service\", service.id, \"with job\", job.name);\r\n\t\t\t\t\t\t\tservice.jenkinsJobs.push(job);\r\n\t\t\t\t\t\t\tjobMatched = true;\r\n\t\t\t\t\t\t\tif (debugJenkins) { jobsMatched += 1; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\tif (!jobMatched) {\r\n\t\t\t\t\tunmatchedJobs.push(job);\r\n\t\t\t\t}\r\n\t\t\t\tlet timestamp = job.builds[0].timestamp;\r\n\t\t\t\tstate.timestamps.push(timestamp);\r\n\t\t\t\tstate.jobsByTimestamp[timestamp] = job;\r\n\t\t\t}\r\n\t\t\tif (debugJenkins) {\r\n\t\t\t\tconsole.log(\"Matched\", jobsMatched, \"Jenkins jobs with Load Balancer services\");\r\n\t\t\t\tconsole.log(\"Unmatched jobs:\", unmatchedJobs.map(job => job.name));\r\n\t\t\t}\r\n\t\t\tstate.timestamps.sort();\r\n\t\t\tstate.timestamps.reverse();\r\n\t\t\tstate.timestamps = state.timestamps.slice(0, numJenkinsBuildsToShow);\r\n\t\t\t\r\n\t\t});\t\t\r\n\t}\r\n\thandleNetworkErr(err) {\r\n\t\tthis.setState({\r\n\t\t\tnetworkText: err.message,\r\n\t\t\tgroups: [],\r\n\t\t});\r\n\t\treturn err;\r\n\t}\r\n\trender() {\r\n\t\tvar groups = this.state.groups.map((group, index) => { return <Group key={index} group={group} /> });\r\n\t\tif (groups.length === 0) {\r\n\t\t\tgroups = <div className=\"network-text\">{this.state.networkText}</div>\r\n\t\t}\r\n\t\tvar downedServices = this.state.downedServices.map(service => <DownedService service={service} key={service.id} />);\r\n\t\tvar progressbarPercentage = this.state.timeSinceLastUpdate * 100/updateFrequency;\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div id=\"App\">\r\n\t\t\t\t<div className=\"monitor\">\r\n\t\t\t\t\t<ul className=\"groups\">\r\n\t\t\t\t\t\t{groups}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t<div id=\"network-status\" className={this.state.networkStatus} onClick={this.fetchLoopController().stop}>\r\n\t\t\t\t\t\t<CircularProgressbar percentage={progressbarPercentage} styles={{\r\n\t\t\t\t\t\t\tpath: { \r\n\t\t\t\t\t\t\t\tstroke: 'lime',\r\n\t\t\t\t\t\t\t\tstrokeWidth: '.05em',\r\n\t\t\t\t\t\t\t\tstrokeLinecap: 'butt',\r\n\t\t\t\t\t\t\t\tstrokeDasharray: '4'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\ttrail: {\r\n\t\t\t\t\t\t\t\tstroke: 'hsl(0, 0%, 10%)',\r\n\t\t\t\t\t\t\t\tstrokeWidth: '0.05em',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"stats\">\r\n\t\t\t\t\t<div className=\"stat-line stat-line-green\">\r\n\t\t\t\t\t\t<strong>UP: </strong>\r\n\t\t\t\t\t\t<span className=\"circle green\"></span>\r\n\t\t\t\t\t\t<span>{this.state.serviceStats.up} services,</span>\r\n\t\t\t\t\t\t<span className=\"square green\"></span>\r\n\t\t\t\t\t\t<span>{this.state.serverStats.up} servers</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"stat-line stat-line-grey\">\r\n\t\t\t\t\t\t<strong>DISABLED: </strong>\r\n\t\t\t\t\t\t<span className=\"square grey\"></span>\r\n\t\t\t\t\t\t<span>{this.state.serverStats.disabled} servers</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"downed\">\r\n\t\t\t\t\t\t<div className=\"stat-line stat-line-red\">\r\n\t\t\t\t\t\t\t{simulateDownedService && <strong>**SIMULATED**<br/></strong>}\r\n\t\t\t\t\t\t\t<strong>DOWN: </strong>\r\n\t\t\t\t\t\t\t<span className=\"circle red\"></span>\r\n\t\t\t\t\t\t\t<span>{this.state.serviceStats.down} services,</span>\r\n\t\t\t\t\t\t\t<span className=\"square red\"></span>\r\n\t\t\t\t\t\t\t<span>{this.state.serverStats.down} servers</span>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"downed-services\">\r\n\t\t\t\t\t\t\t{downedServices}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<JenkinsLog timestamps={this.state.timestamps} jobsByTimestamp={this.state.jobsByTimestamp} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst Group = props => {\r\n\tvar systems = props.group.virtual_services.map(system => <System key={system.name} system={system} debugJenkins={debugJenkins} serverColors={serverColors} />);\r\n\treturn (\r\n\t\t<li className=\"group\">\r\n\t\t\t{props.group.id}\r\n\t\t\t{systems}\r\n\t\t</li>\r\n\t)\r\n};\r\n\r\nclass DownedService extends Component {\r\n\trender() {\r\n\t\tvar servers = this.props.service.servers.map(server => <div className=\"server indent\" key={server.id}>\r\n\t\t\t\t<div className={\"square \" + serverColors[server.operational_status]}></div>\r\n\t\t\t\t<div className=\"server-name\">{server.id}</div>\r\n\t\t</div>)\r\n\t\treturn <div className=\"downed-service\">\r\n\t\t\t<div className=\"red circle\"></div>\r\n\t\t\t<div className=\"downed-service-name\">{this.props.service.id}</div>\r\n\t\t\t<div>\r\n\t\t\t\t{servers}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}