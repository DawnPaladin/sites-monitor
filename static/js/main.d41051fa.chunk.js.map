{"version":3,"sources":["Diamond.jsx","System.jsx","JenkinsLog.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Diamond","jenkinsClassName","this","props","buildResult","react_default","a","createElement","className","React","Component","serviceColor","up","down","System","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","servers","system","formatTimeAgo","bind","assertThisInitialized","notTooLongAgo","tierIndicator","timestamp","isNaN","seconds","Math","floor","Date","interval","concat","valueOf","tier","cssClass","toLowerCase","status","title","id","_this2","map","server","serverColors","operational_status","key","jenkinsBuilds","diamond","jenkinsJobs","length","builds","Diamond_Diamond","result","job","buildVizClasses","debugJenkins","name","resultText","SUCCESS","FAILURE","ABORTED","JenkinsLog","jenkinsLogEntries","timestamps","jobsByTimestamp","build","enable","disable","out-of-service-health","ErrorBoundary","hasError","error","info","console","warn","children","App","groups","serviceStats","serverStats","disabled","downedServices","timeSinceLastUpdate","networkText","showLegend","fetchLoopController","checkIfServiceIsDown","getLoadBalancerStatus","getJenkinsStatus","processLoadBalancerData","processJenkinsData","handleNetworkErr","start","_this3","setState","networkStatus","Promise","all","then","response","_response","slicedToArray","loadBalancerData","jenkinsData","window","location","redirect","fetchLoop","setInterval","tick","stop","clearInterval","updateFrequency","service","serversDown","threshold","parseInt","minimum_notificate_real_server","forEach","_this4","fetch","ok","json","callback","_this5","replaceUnderscores","string","replace","loading","data","sort","groupA","groupB","nameA","toUpperCase","nameB","group","virtual_services","toConsumableArray","_this6","jobs","unmatchedJobs","textInBrackets","_loop","pop","jobMatched","color","matches","regexResults","exec","description","push","serviceIdInJobDescription","some","phrase","arr","split","lastWord","join","parenthesizeLastWord","reverse","slice","err","message","index","App_Group","App_DownedService","progressbarPercentage","App_ErrorBoundary","onClick","dist_default","percentage","styles","path","stroke","strokeWidth","strokeLinecap","strokeDasharray","trail","src","alt","JenkinsLog_JenkinsLog","Group","systems","System_System","DownedService","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uQAIqBA,gMAKnB,IAAIC,EAAmB,UAKvB,MAJoC,YAA3BC,KAAKC,MAAMC,YAA2BH,GAAoB,SAC/B,YAA3BC,KAAKC,MAAMC,YAA2BH,GAAoB,OAC9DA,GAAoB,QAElBI,EAAAC,EAAAC,cAAA,OAAKC,UAAWP,WAVYQ,IAAMC,YCCrCC,EAAe,CACpBC,GAAI,QACJC,KAAM,OAGcC,cAsBpB,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAY,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlB,KAAMC,KACDkB,MAAQ,CACZC,QAASP,EAAKZ,MAAMoB,OAAOD,SAE5BP,EAAKS,cAAgBT,EAAKS,cAAcC,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACrBA,EAAKY,cAAgBZ,EAAKY,cAAcF,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACrBA,EAAKa,cAAgBb,EAAKa,cAAcH,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAPHA,6EASLc,GACb,GAAIC,MAAMD,GAAY,MAAO,GAE7B,IAAIE,EAAUC,KAAKC,OAAO,IAAIC,KAAK,yBAA2BL,GAAa,KAGvEM,EAAWH,KAAKC,MAAMF,EAAU,MACpC,OAAII,EAAW,EAAG,GAAAC,OAAUD,EAAV,MAElBA,EAAWH,KAAKC,MAAMF,EAAU,KACjB,EAAG,GAAAK,OAAUD,EAAV,KAElB,GAAAC,OAAUL,EAAV,2CAEaF,GAIb,OAHU,IAAIK,KAAK,yBACQG,UAEAR,EADR,8CAInB,IAAIS,EAAOpC,KAAKC,MAAMoB,OAAOe,KACzBC,EAAW,QAAQD,EAAKE,cAAgB,IAAM7B,EAAaT,KAAKC,MAAMoB,OAAOkB,QACjF,OAAOH,EAAOjC,EAAAC,EAAAC,cAAA,OAAKC,UAAW+B,EAAUG,MAAOxC,KAAKC,MAAMoB,OAAOoB,KAAatC,EAAAC,EAAAC,cAAA,6CAEtE,IAAAqC,EAAA1C,KACJoB,EAAUpB,KAAKC,MAAMoB,OAAOD,QAAQuB,IAAI,SAAAC,GAAM,OACjDzC,EAAAC,EAAAC,cAAA,OACCC,UAAY,QAAUoC,EAAKzC,MAAM4C,aAAaD,EAAOE,oBACrDF,OAAQA,EACRG,IAAKH,EAAOH,GACZD,MAAOI,EAAOH,OAIZO,EAAgB,GAChBC,EAAU,KAuBd,OArBCjD,KAAKC,MAAMoB,OAAO6B,aAClBlD,KAAKC,MAAMoB,OAAO6B,YAAYC,QAC9BnD,KAAKC,MAAMoB,OAAO6B,YAAY,GAAGE,QACjCpD,KAAKC,MAAMoB,OAAO6B,YAAY,GAAGE,OAAOD,SAExCF,EAAU9C,EAAAC,EAAAC,cAACgD,EAAD,CAASnD,YAAaF,KAAKC,MAAMoB,OAAO6B,YAAY,GAAGE,OAAO,GAAGE,SAE3EN,EAAgBhD,KAAKC,MAAMoB,OAAO6B,YAAYP,IAAI,SAAAY,GACjD,IAAIC,EAAkB,YAGtB,MAF6B,YAAzBD,EAAIH,OAAO,GAAGE,SAAsBE,GAAmB,eAC9B,YAAzBD,EAAIH,OAAO,GAAGE,SAAsBE,GAAmB,aACvDd,EAAKjB,cAAc8B,EAAIH,OAAO,GAAGzB,YAAce,EAAKzC,MAAMwD,aACrDtD,EAAAC,EAAAC,cAAA,OAAKC,UAAWkD,EAAiBT,IAAKQ,EAAIG,KAAMlB,MAAO,gBAAkBe,EAAIG,MACnFhB,EAAKpB,cAAciC,EAAIH,OAAO,GAAGzB,YAG5B,QAMTxB,EAAAC,EAAAC,cAAA,OAAKC,UAAwC,SAA7BN,KAAKC,MAAMoB,OAAOkB,OAAoB,gBAAkB,UACvEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBAAoBG,EAAaT,KAAKC,MAAMoB,OAAOkB,SACjEvC,KAAK0B,iBAEPvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbc,GAED6B,EACD9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACb0C,WApG8BxC,aCL9BmD,EAAa,CAClBC,QAAW,YACXC,QAAW,SACXC,QAAW,WAGSC,cAKpB,SAAAA,EAAY9D,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAA+D,IAClBlD,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAiD,GAAA7C,KAAAlB,KAAMC,KACDqB,cAAgBT,EAAKS,cAAcC,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAFHA,6EAILc,GACb,GAAIC,MAAMD,GAAY,MAAO,GAE7B,IAAIE,EAAUC,KAAKC,OAAO,IAAIC,KAAK,yBAA2BL,GAAa,KAGvEM,EAAWH,KAAKC,MAAMF,EAAU,OACpC,OAAiB,IAAbI,EAAgB,YAChBA,EAAW,EAAG,GAAAC,OAAUD,EAAV,aAGD,KADjBA,EAAWH,KAAKC,MAAMF,EAAU,OACZ,aAChBI,EAAW,EAAG,GAAAC,OAAUD,EAAV,cAGD,KADjBA,EAAWH,KAAKC,MAAMF,EAAU,KACZ,eAChBI,EAAW,EAAG,GAAAC,OAAUD,EAAV,gBAElB,GAAAC,OAAUL,EAAV,iDAEQ,IAAAa,EAAA1C,KACJgE,EAAoBhE,KAAKC,MAAMgE,WAAWtB,IAAI,SAAAhB,GACjD,IAAI4B,EAAMb,EAAKzC,MAAMiE,gBAAgBvC,GACjCwC,EAAQZ,EAAIH,OAAO,GAEvB,OAAQjD,EAAAC,EAAAC,cAAA,OAAK0C,IAAKpB,EAAWrB,UAAU,YACtCH,EAAAC,EAAAC,cAACgD,EAAD,CAASnD,YAAaiE,EAAMb,SAC3BC,EAAIG,KAFE,IAEKC,EAAWQ,EAAMb,QAFtB,IAEgCZ,EAAKpB,cAAcK,MAG5D,OACCxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACdH,EAAAC,EAAAC,cAAA,+BACE2D,UA1CkCzD,IAAMC,WCF9C,IAQMqC,EAAe,CACpBuB,OAAU,QACVC,QAAW,OACXC,wBAAyB,OAGpBC,cACL,SAAAA,EAAYtE,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAuE,IAClB1D,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAyD,GAAArD,KAAAlB,KAAMC,KACDkB,MAAQ,CACZqD,UAAU,GAHO3D,iFAcD4D,EAAOC,GACxBC,QAAQC,KAAKH,oCAIb,OAAIzE,KAAKmB,MAAMqD,SACPrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACrBH,EAAAC,EAAAC,cAAA,oBAIKL,KAAKC,MAAM4E,4DAlBaJ,GAE/B,MAAO,CACND,UAAU,UAXehE,aA8BtBsE,cACL,SAAAA,EAAY7E,GAAO,IAAAyC,EAAA,OAAA5B,OAAAC,EAAA,EAAAD,CAAAd,KAAA8E,IAClBpC,EAAA5B,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAgE,GAAA5D,KAAAlB,KAAMC,KACDkB,MAAQ,CACZ4D,OAAQ,GACRC,aAAc,CACbtE,GAAI,EACJC,KAAM,GAEPsE,YAAa,CACZvE,GAAI,EACJwE,SAAU,EACVvE,KAAM,GAEPwE,eAAgB,GAChBC,oBAAqB,EACrBC,YAAa,aACbnB,gBAAiB,GACjBD,WAAY,GACZqB,YAAY,GAEb5C,EAAK6C,oBAAsB7C,EAAK6C,oBAAoBhE,KAAzBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAA4B,KAC3BA,EAAK8C,qBAAuB9C,EAAK8C,qBAAqBjE,KAA1BT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAA4B,KAC5BA,EAAK+C,sBAAwB/C,EAAK+C,sBAAsBlE,KAA3BT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAA4B,KAC7BA,EAAKgD,iBAAmBhD,EAAKgD,iBAAiBnE,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAA4B,KACxBA,EAAKiD,wBAA0BjD,EAAKiD,wBAAwBpE,KAA7BT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAA4B,KAC/BA,EAAKkD,mBAAqBlD,EAAKkD,mBAAmBrE,KAAxBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAA4B,KAC1BA,EAAKmD,iBAAmBnD,EAAKmD,iBAAiBtE,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAA4B,KA1BNA,mFA6BlB1C,KAAKuF,sBAAsBO,sDAEN,IAAAC,EAAA/F,KACf8F,EAAQ,WACbC,EAAKC,SAAS,CAAEC,cAAe,YAC/BC,QAAQC,IAAI,CAAEJ,EAAKN,wBAAyBM,EAAKL,qBAAsBU,KAAK,SAACC,GAAa,IAAAC,EAAAxF,OAAAyF,EAAA,EAAAzF,CAC/CuF,EAD+C,GACjFG,EADiFF,EAAA,GAC/DG,EAD+DH,EAAA,GAG1D,UAA3BE,EAAiB/B,MACpBiC,OAAOC,SAAWH,EAAiBI,SACH,UAAtBH,EAAYhC,QACtBiC,OAAOC,SAAWF,EAAYG,UAE/Bb,EAAKJ,wBAAwBa,EAAkB,WAC9CT,EAAKH,mBAAmBa,MAEvB,SAAChC,GACHsB,EAAKF,iBAAiBpB,KACpB2B,KAAK,WACPL,EAAKC,SAAS,CACba,UAAWC,YAAYC,EAAM,KAC7B3B,oBAAqB,EACrBa,cAAe,eAIZe,EAAO,WACZC,cAAclB,EAAK5E,MAAM0F,WACzBd,EAAKC,SAAS,CACbZ,oBAAqB,EACrBa,cAAe,aAGXc,EAAO,WACRhB,EAAK5E,MAAMiE,oBAAsB8B,IACpCF,IACAlB,IACAC,EAAKC,SAAS,CAAEV,YAAY,KAE5BS,EAAKC,SAAS,CAAEZ,oBAAqBW,EAAK5E,MAAMiE,oBAAsB,KAGxE,MAAO,CAAEU,QAAOkB,qDAEIG,GACpB,IAAIC,EAAc,EACdC,EAAYC,SAASH,EAAQI,gCAIjC,OAHAJ,EAAQ/F,QAAQoG,QAAQ,SAAA5E,GACW,0BAA9BA,EAAOE,qBAAgDsE,GAAe,KAEpEA,EAAc,GAAKA,GAAeC,kDAElB,IAAAI,EAAAzH,KACvB,OAAO0H,MA/He,qCAgIpBtB,KAAK,SAAAC,GACL,GAAIA,EAASsB,GACZ,OAAOtB,EAASuB,OAEhBH,EAAK5B,iBAAiBQ,qDAKFuB,EAAMC,GAAU,IAAAC,EAAA9H,KACjC+H,EAAqB,SAAAC,GAAM,OAAIA,EAAOC,QAAQ,KAAM,MAC1DjI,KAAKgG,SAAS,CAAEkC,SAAS,IAEzB,IAAInD,EAAS6C,EAAKO,KAClBpD,EAAOqD,KAAK,SAACC,EAAQC,GACpB,IAAIC,EAAQF,EAAO5F,GAAG+F,cAClBC,EAAQH,EAAO7F,GAAG+F,cACtB,OAAID,EAAQE,GAAe,EACvBF,EAAQE,EAAc,EACnB,IAER1D,EAAOyC,QAAQ,SAAAkB,GACdA,EAAMjG,GAAKsF,EAAmBW,EAAMjG,IACpCiG,EAAMC,iBAAiBnB,QAAQ,SAAAL,GAC9BA,EAAQ1E,GAAKsF,EAAmBZ,EAAQ1E,QAI1CzC,KAAKgG,SAAS,CAACjB,OAAQA,IAEvB,IAAIC,EAAe,CAClBtE,GAAI,EACJC,KAAM,GAEHsE,EAAc,CACjBvE,GAAI,EACJwE,SAAU,EACVvE,KAAM,GAEPX,KAAKgG,SAAS,CAAEb,eAAgB,KACLJ,EAAO,GAAG4D,iBAAiB,GAAGvH,QAAQ,GAAG0B,mBAAqB,wBACzFiC,EAAOyC,QAAQ,SAAAkB,GACdA,EAAMC,iBAAiBnB,QAAQ,SAAAL,GAC1BW,EAAKtC,qBAAqB2B,IAC7BA,EAAQ5E,OAAS,OACjByC,EAAarE,MAAQ,EACrBmH,EAAK9B,SAAS,CAAEb,eAAerE,OAAA8H,EAAA,EAAA9H,CAAKgH,EAAK3G,MAAMgE,gBAAjBjD,OAAA,CAAiCiF,QAE/DA,EAAQ5E,OAAS,KACjByC,EAAatE,IAAM,GAEpByG,EAAQjE,YAAc,GACtBiE,EAAQ/F,QAAQoG,QAAQ,SAAA5E,GACW,WAA9BA,EAAOE,mBAAmCmC,EAAYvE,IAAM,EACzB,YAA9BkC,EAAOE,mBAAoCmC,EAAYC,UAAY,EACrC,0BAA9BtC,EAAOE,mBAAkDmC,EAAYtE,MAAQ,EAC/EgE,QAAQC,KAAK,2BAA4BhC,EAAOE,0BAK1D9C,KAAKgG,SAAS,CAAEhB,aAAcA,EAAcC,YAAaA,GAAe4C,8CAEtD,IAAAgB,EAAA7I,KAClB,OAAO0H,MA/LU,+BAgMhBtB,KAAK,SAAAC,GACL,GAAIA,EAASsB,GACZ,OAAOtB,EAASuB,OAEhBiB,EAAKhD,iBAAiBQ,gDAINyC,GAQlB9I,KAAKgG,SAAS,SAAS7E,GACtB,IAAM4D,EAAS5D,EAAM4D,OACfgE,EAAgB,GAChBC,EAAiB,aAEvB7H,EAAM8C,WAAa,GACnB,IAN6B,IAAAgF,EAAA,WAO5B,IAAM1F,EAAMuF,EAAKI,MACbC,GAAa,EACjB,GAAkB,aAAd5F,EAAI6F,MAAsB,iBA0B9B,GAzBArE,EAAOyC,QAAQ,SAAAkB,GACdA,EAAMC,iBAAiBnB,QAAQ,SAAAL,GAG9B,IAFA,IAAIkC,EACEC,EAAe,GACdD,EAAUL,EAAeO,KAAKhG,EAAIiG,cACxCF,EAAaG,KAAKJ,EAAQ,IAE3B,IAAMK,EAA4BJ,GAAgBA,EAAaK,KAAK,SAAArG,GAAM,OAAIA,IAAW6D,EAAQ1E,MAEhGc,EAAIG,OAASyD,EAAQ1E,IACrBc,EAAIG,OA3BoB,SAAAkG,GAC5B,IAAIC,EAAMD,EAAOE,MAAM,KACnBC,EAAWF,EAAIX,MAEnB,OADAW,EAAIJ,KAAJ,IAAAvH,OAAa6H,EAAb,MACOF,EAAIG,KAAK,KAuBCC,CAAqB9C,EAAQ1E,KAC1Cc,EAAIG,OAASyD,EAAQ1E,GAAGwF,QAAQ,MAAO,YACvC1E,EAAIG,OAASyD,EAAQ1E,GAAGwF,QAAQ,MAAO,cACvCyB,KAGAvC,EAAQjE,YAAYuG,KAAKlG,GACzB4F,GAAa,OAKXA,GACJJ,EAAcU,KAAKlG,GAEhBA,EAAIH,OAAOD,OAAQ,CACtB,IAAIxB,EAAY4B,EAAIH,OAAO,GAAGzB,UAC9BR,EAAM8C,WAAWwF,KAAK9H,GACtBR,EAAM+C,gBAAgBvC,GAAa4B,IAhC9BuF,EAAK3F,OAAS,GAAG8F,IAuCxB9H,EAAM8C,WAAWmE,OACjBjH,EAAM8C,WAAWiG,UACjB/I,EAAM8C,WAAa9C,EAAM8C,WAAWkG,MAAM,EA3Pd,+CA+PbC,GAKhB,OAJApK,KAAKgG,SAAS,CACbX,YAAa+E,EAAIC,QACjBtF,OAAQ,KAEFqF,mCAGP,IAAIrF,EAAS/E,KAAKmB,MAAM4D,OAAOpC,IAAI,SAAC+F,EAAO4B,GAAY,OAAOnK,EAAAC,EAAAC,cAACkK,EAAD,CAAOxH,IAAKuH,EAAO5B,MAAOA,MAClE,IAAlB3D,EAAO5B,SACV4B,EAAS5E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBN,KAAKmB,MAAMkE,cAEpD,IAAIF,EAAiBnF,KAAKmB,MAAMgE,eAAexC,IAAI,SAAAwE,GAAO,OAAIhH,EAAAC,EAAAC,cAACmK,EAAD,CAAerD,QAASA,EAASpE,IAAKoE,EAAQ1E,OACxGgI,EAAyD,IAAjCzK,KAAKmB,MAAMiE,oBA/QjB,GAiRtB,OACCjF,EAAAC,EAAAC,cAAA,OAAKoC,GAAG,OACPtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAACqK,EAAD,KACCvK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACZyE,IAGH5E,EAAAC,EAAAC,cAACqK,EAAD,KACCvK,EAAAC,EAAAC,cAAA,OAAKoC,GAAG,iBAAiBnC,UAAWN,KAAKmB,MAAM8E,cAAe0E,QAAS3K,KAAKuF,sBAAsByB,MACjG7G,EAAAC,EAAAC,cAACuK,EAAAxK,EAAD,CAAqByK,WAAYJ,EAAuBK,OAAQ,CAC/DC,KAAM,CACLC,OAAQ,OACRC,YAAa,QACbC,cAAe,OACfC,gBAAiB,KAElBC,MAAO,CACNJ,OAAQ,kBACRC,YAAa,gBAMlB9K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAACqK,EAAD,KACCvK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACdH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAChBH,EAAAC,EAAAC,cAAA,YAAOL,KAAKmB,MAAM6D,aAAatE,GAA/B,cACAP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAChBH,EAAAC,EAAAC,cAAA,YAAOL,KAAKmB,MAAM8D,YAAYvE,GAA9B,aAEDP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACdH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAChBH,EAAAC,EAAAC,cAAA,YAAOL,KAAKmB,MAAM8D,YAAYC,SAA9B,aAED/E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACYH,EAAAC,EAAAC,cAAA,8BAAqBF,EAAAC,EAAAC,cAAA,YAC/CF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAChBH,EAAAC,EAAAC,cAAA,YAAOL,KAAKmB,MAAM6D,aAAarE,KAA/B,cACAR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAChBH,EAAAC,EAAAC,cAAA,YAAOL,KAAKmB,MAAM8D,YAAYtE,KAA9B,aAGDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACb6E,KAIFnF,KAAKmB,MAAMmE,YACZnF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,OAAKgL,IAAI,4BAA4BC,IAAI,YAG3CnL,EAAAC,EAAAC,cAACqK,EAAD,KACCvK,EAAAC,EAAAC,cAACkL,EAAD,CAAYtH,WAAYjE,KAAKmB,MAAM8C,WAAYC,gBAAiBlE,KAAKmB,MAAM+C,4BApS/D1D,aA4SZgL,EAAQ,SAAAvL,GACb,IAAIwL,EAAUxL,EAAMyI,MAAMC,iBAAiBhG,IAAI,SAAAtB,GAAM,OAAIlB,EAAAC,EAAAC,cAACqL,EAAD,CAAQ3I,IAAK1B,EAAOqC,KAAMrC,OAAQA,EAAQoC,cAnV/E,EAmV2GZ,aAAcA,MAC7I,OACC1C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACZL,EAAMyI,MAAMjG,GACZgJ,IAKEE,mLAEJ,IAAIvK,EAAUpB,KAAKC,MAAMkH,QAAQ/F,QAAQuB,IAAI,SAAAC,GAAM,OAAIzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgByC,IAAKH,EAAOH,IAChGtC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UAAYuC,EAAaD,EAAOE,sBAChD3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAesC,EAAOH,OAEvC,OAAOtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACrBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBN,KAAKC,MAAMkH,QAAQ1E,IACzDtC,EAAAC,EAAAC,cAAA,WACEe,WAVuBZ,aAgBbsE,IC/WK8G,QACW,cAA7BlF,OAAOC,SAASkF,UAEe,UAA7BnF,OAAOC,SAASkF,UAEhBnF,OAAOC,SAASkF,SAASC,MACvB,2DCbNC,IAASC,OAAO7L,EAAAC,EAAAC,cAAC4L,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlG,KAAK,SAAAmG,GACjCA,EAAaC","file":"static/js/main.d41051fa.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Used in the System component and the Jenkins build log */\r\nexport default class Diamond extends React.Component {\r\n\tstatic propTypes = {\r\n\t\tbuildResult: PropTypes.string.isRequired,\r\n\t}\r\n\trender() {\r\n\t\tlet jenkinsClassName = \"diamond\";\r\n\t\tif      (this.props.buildResult === \"SUCCESS\") jenkinsClassName += \" green\";\r\n\t\telse if (this.props.buildResult === \"FAILURE\") jenkinsClassName += \" red\";\r\n\t\telse jenkinsClassName += \" grey\";\r\n\t\t\r\n\t\treturn <div className={jenkinsClassName}></div>;\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Diamond from './Diamond';\r\n\r\nconst serviceColor = {\r\n\tup: \"green\",\r\n\tdown: \"red\",\r\n}\r\n/** Visualizes a service (site) which is kept live by one or more servers. Member of a Group. */\r\nexport default class System extends Component {\r\n\tstatic propTypes = {\r\n\t\tsystem: PropTypes.shape({\r\n\t\t\tservers: PropTypes.arrayOf(PropTypes.shape({\r\n\t\t\t\tid: PropTypes.any.isRequired,\r\n\t\t\t\toperational_status: PropTypes.string.isRequired,\r\n\t\t\t})).isRequired,\r\n\t\t\tid: PropTypes.string.isRequired,\r\n\t\t\tstatus: PropTypes.string, // should be present, but not on first render\r\n\t\t\tjenkinsJobs: PropTypes.arrayOf(PropTypes.shape({\r\n\t\t\t\tbuilds: PropTypes.arrayOf(PropTypes.shape({\r\n\t\t\t\t\tresult: PropTypes.string.isRequired,\r\n\t\t\t\t\ttimestamp: PropTypes.number.isRequired\r\n\t\t\t\t})).isRequired,\r\n\t\t\t})), // jenkinsJobs are not required\r\n\t\t}).isRequired,\r\n\t\tdebugJenkins: PropTypes.bool, // not required\r\n\t\tserverColors: PropTypes.shape({\r\n\t\t\tenable: PropTypes.string.isRequired,\r\n\t\t\tdisable: PropTypes.string.isRequired,\r\n\t\t}).isRequired,\r\n\t}\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tservers: this.props.system.servers,\r\n\t\t}\r\n\t\tthis.formatTimeAgo = this.formatTimeAgo.bind(this);\r\n\t\tthis.notTooLongAgo = this.notTooLongAgo.bind(this);\r\n\t\tthis.tierIndicator = this.tierIndicator.bind(this);\r\n\t}\r\n\tformatTimeAgo(timestamp) {\r\n\t\tif (isNaN(timestamp)) return '';\r\n\t\t\r\n\t\tvar seconds = Math.floor((new Date('Feb 27, 2019 12:19:00') - timestamp) / 1000);\r\n\t\t\r\n\t\t// hours\r\n\t\tvar interval = Math.floor(seconds / 3600);\r\n\t\tif (interval > 0) return `${interval}h`;\r\n\t\t// minutes\r\n\t\tinterval = Math.floor(seconds / 60);\r\n\t\tif (interval > 0) return `${interval}m`;\r\n\t\t// seconds\r\n\t\treturn `${seconds}s`;\r\n\t}\r\n\tnotTooLongAgo(timestamp) {\r\n\t\tvar now = new Date('Feb 27, 2019 12:19:00');\r\n\t\tvar currentTimestamp = now.valueOf();\r\n\t\tconst eightHours = 1000 * 60 * 60 * 8;\r\n\t\treturn (currentTimestamp - timestamp) < eightHours;\r\n\t}\r\n\ttierIndicator() {\r\n\t\tvar tier = this.props.system.tier;\r\n\t\tvar cssClass = \"tier-\"+tier.toLowerCase() + ' ' + serviceColor[this.props.system.status];\r\n\t\treturn tier ? <div className={cssClass} title={this.props.system.id}></div> : <div></div>;\r\n\t}\r\n\trender() {\r\n\t\tvar servers = this.props.system.servers.map(server => (\r\n\t\t\t<div \r\n\t\t\t\tclassName={ \"rect \" + this.props.serverColors[server.operational_status]}\r\n\t\t\t\tserver={server}\r\n\t\t\t\tkey={server.id}\r\n\t\t\t\ttitle={server.id}\r\n\t\t\t></div>\r\n\t\t));\r\n\t\t\r\n\t\tvar jenkinsBuilds = [];\r\n\t\tvar diamond = null;\r\n\t\tif (\r\n\t\t\tthis.props.system.jenkinsJobs && \r\n\t\t\tthis.props.system.jenkinsJobs.length && \r\n\t\t\tthis.props.system.jenkinsJobs[0].builds &&\r\n\t\t\tthis.props.system.jenkinsJobs[0].builds.length\r\n\t\t) {\r\n\t\t\tdiamond = <Diamond buildResult={this.props.system.jenkinsJobs[0].builds[0].result} />\r\n\t\t\t\r\n\t\t\tjenkinsBuilds = this.props.system.jenkinsJobs.map(job => {\r\n\t\t\t\tvar buildVizClasses = \"build-viz\";\r\n\t\t\t\tif (job.builds[0].result === \"SUCCESS\") buildVizClasses += \" green-text\";\r\n\t\t\t\tif (job.builds[0].result === \"FAILURE\") buildVizClasses += \" red-text\";\r\n\t\t\t\tif (this.notTooLongAgo(job.builds[0].timestamp) || this.props.debugJenkins) {\r\n\t\t\t\t\treturn (<div className={buildVizClasses} key={job.name} title={\"Jenkins job: \" + job.name}>\r\n\t\t\t\t\t\t{this.formatTimeAgo(job.builds[0].timestamp)}\r\n\t\t\t\t\t</div>);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className={this.props.system.status === \"down\" ? \"downed system\" : \"system\"}>\r\n\t\t\t\t<div className={\"circle-outline-\" + serviceColor[this.props.system.status]}>\r\n\t\t\t\t\t{this.tierIndicator()}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"rects\">\r\n\t\t\t\t\t{servers}\r\n\t\t\t\t</div>\r\n\t\t\t\t{diamond}\r\n\t\t\t\t<div className=\"builds\">\r\n\t\t\t\t\t{jenkinsBuilds}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Diamond from './Diamond';\r\n\r\nconst resultText = { \r\n\t\"SUCCESS\": \"succeeded\",\r\n\t\"FAILURE\": \"failed\",\r\n\t\"ABORTED\": \"aborted\",\r\n}\r\n\r\nexport default class JenkinsLog extends React.Component {\r\n\tstatic propTypes = {\r\n\t\ttimestamps: PropTypes.array.isRequired,\r\n\t\tjobsByTimestamp: PropTypes.object.isRequired,\r\n\t}\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.formatTimeAgo = this.formatTimeAgo.bind(this);\r\n\t}\r\n\tformatTimeAgo(timestamp) {\r\n\t\tif (isNaN(timestamp)) return '';\r\n\t\t\r\n\t\tvar seconds = Math.floor((new Date('Feb 27, 2019 12:19:00') - timestamp) / 1000);\r\n\t\t\r\n\t\t// days\r\n\t\tvar interval = Math.floor(seconds / 86400 );\r\n\t\tif (interval === 1) return `1 day ago`\r\n\t\tif (interval > 1) return `${interval} days ago`\r\n\t\t// hours\r\n\t\tinterval = Math.floor(seconds / 3600);\r\n\t\tif (interval === 1) return `1 hour ago`;\r\n\t\tif (interval > 1) return `${interval} hours ago`;\r\n\t\t// minutes\r\n\t\tinterval = Math.floor(seconds / 60);\r\n\t\tif (interval === 1) return `1 minute ago`;\r\n\t\tif (interval > 1) return `${interval} minutes ago`;\r\n\t\t// seconds\r\n\t\treturn `${seconds} seconds ago`;\r\n\t}\r\n\trender() {\r\n\t\tvar jenkinsLogEntries = this.props.timestamps.map(timestamp => {\r\n\t\t\tlet job = this.props.jobsByTimestamp[timestamp];\r\n\t\t\tlet build = job.builds[0];\r\n\t\t\t\r\n\t\t\treturn (<div key={timestamp} className=\"log-line\">\r\n\t\t\t\t<Diamond buildResult={build.result} />\r\n\t\t\t\t{job.name} {resultText[build.result]} {this.formatTimeAgo(timestamp)}\r\n\t\t\t</div>);\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<div className=\"jenkins-log\">\r\n\t\t\t\t<h2>Jenkins build log</h2>\r\n\t\t\t\t{ jenkinsLogEntries }\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport CircularProgressbar from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport './App.scss';\r\nimport System from './System';\r\nimport JenkinsLog from './JenkinsLog';\r\nimport dumpLoadBalancer from './export';\r\n\r\nconst loadBalancerUrl = \"/sites-monitor/load-balancer.json\";\r\nconst jenkinsUrl = \"/sites-monitor/jenkins.json\";\r\nconst updateFrequency = 30; // seconds to wait between data refreshes\r\n\r\nconst simulateDownedService = true;\r\nconst numJenkinsBuildsToShow = 15;\r\nconst debugJenkins = false;\r\nconst exportData = false;\r\nconst serverColors = {\r\n\t\"enable\": \"green\",\r\n\t\"disable\": \"grey\",\r\n\t\"out-of-service-health\": \"red\"\r\n}\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { \r\n\t\t\thasError: false,\r\n\t\t};\r\n\t}\r\n\t\r\n\tstatic getDerivedStateFromError(error) {\r\n\t\t// Update state so the next render will show the fallback UI.\r\n\t\treturn { \r\n\t\t\thasError: true,\r\n\t\t};\r\n\t}\r\n\t\r\n\tcomponentDidCatch(error, info) {\r\n\t\tconsole.warn(error);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <div className=\"error\">\r\n\t\t\t\t<h1>Error</h1>\r\n\t\t\t</div>\r\n\t\t}\r\n\t\t\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tgroups: [],\r\n\t\t\tserviceStats: {\r\n\t\t\t\tup: 0,\r\n\t\t\t\tdown: 0,\r\n\t\t\t},\r\n\t\t\tserverStats: {\r\n\t\t\t\tup: 0,\r\n\t\t\t\tdisabled: 0,\r\n\t\t\t\tdown: 0,\r\n\t\t\t},\r\n\t\t\tdownedServices: [],\r\n\t\t\ttimeSinceLastUpdate: 0,\r\n\t\t\tnetworkText: \"Loading...\",\r\n\t\t\tjobsByTimestamp: {},\r\n\t\t\ttimestamps: [],\r\n\t\t\tshowLegend: true,\r\n\t\t};\r\n\t\tthis.fetchLoopController = this.fetchLoopController.bind(this);\r\n\t\tthis.checkIfServiceIsDown = this.checkIfServiceIsDown.bind(this);\r\n\t\tthis.getLoadBalancerStatus = this.getLoadBalancerStatus.bind(this);\r\n\t\tthis.getJenkinsStatus = this.getJenkinsStatus.bind(this);\r\n\t\tthis.processLoadBalancerData = this.processLoadBalancerData.bind(this);\r\n\t\tthis.processJenkinsData = this.processJenkinsData.bind(this);\r\n\t\tthis.handleNetworkErr = this.handleNetworkErr.bind(this);\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tthis.fetchLoopController().start();\r\n\t}\r\n\tfetchLoopController() {\r\n\t\tconst start = () => {\r\n\t\t\tthis.setState({ networkStatus: \"loading\" });\r\n\t\t\tPromise.all([ this.getLoadBalancerStatus(), this.getJenkinsStatus() ]).then((response) => {\r\n\t\t\t\tconst [ loadBalancerData, jenkinsData ] = response;\r\n\t\t\t\tif (exportData) console.log(dumpLoadBalancer(loadBalancerData));\r\n\t\t\t\tif (loadBalancerData.error === 'error') {\r\n\t\t\t\t\twindow.location = loadBalancerData.redirect;\r\n\t\t\t\t} else if (jenkinsData.error === 'error') {\r\n\t\t\t\t\twindow.location = jenkinsData.redirect;\r\n\t\t\t\t}\r\n\t\t\t\tthis.processLoadBalancerData(loadBalancerData, () => {\r\n\t\t\t\t\tthis.processJenkinsData(jenkinsData);\r\n\t\t\t\t});\r\n\t\t\t}, (error) => { \r\n\t\t\t\tthis.handleNetworkErr(error);\r\n\t\t\t}).then(() => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tfetchLoop: setInterval(tick, 1000),\r\n\t\t\t\t\ttimeSinceLastUpdate: 0,\r\n\t\t\t\t\tnetworkStatus: \"waiting\",\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\tconst stop = () => {\r\n\t\t\tclearInterval(this.state.fetchLoop);\r\n\t\t\tthis.setState({\r\n\t\t\t\ttimeSinceLastUpdate: 0,\r\n\t\t\t\tnetworkStatus: \"stopped\"\r\n\t\t\t});\r\n\t\t}\r\n\t\tconst tick = () => {\r\n\t\t\tif (this.state.timeSinceLastUpdate > updateFrequency - 1) {\r\n\t\t\t\tstop();\r\n\t\t\t\tstart();\r\n\t\t\t\tthis.setState({ showLegend: false });\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({ timeSinceLastUpdate: this.state.timeSinceLastUpdate + 1 });\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { start, stop }\r\n\t}\r\n\tcheckIfServiceIsDown(service) {\r\n\t\tlet serversDown = 0;\r\n\t\tlet threshold = parseInt(service.minimum_notificate_real_server);\r\n\t\tservice.servers.forEach(server => {\r\n\t\t\tif (server.operational_status === 'out-of-service-health') serversDown += 1;\r\n\t\t});\r\n\t\treturn serversDown > 0 && serversDown >= threshold;\r\n\t}\r\n\tgetLoadBalancerStatus() {\r\n\t\treturn fetch(loadBalancerUrl)\r\n\t\t\t.then(response => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.handleNetworkErr(response);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t;\r\n\t}\r\n\tprocessLoadBalancerData(json, callback) {\r\n\t\tconst replaceUnderscores = string => string.replace(/_/g, ' ');\r\n\t\tthis.setState({ loading: true });\r\n\r\n\t\tvar groups = json.data;\r\n\t\tgroups.sort((groupA, groupB) => {\r\n\t\t\tvar nameA = groupA.id.toUpperCase();\r\n\t\t\tvar nameB = groupB.id.toUpperCase();\r\n\t\t\tif (nameA < nameB) return -1;\r\n\t\t\tif (nameA > nameB) return 1;\r\n\t\t\treturn 0;\r\n\t\t});\r\n\t\tgroups.forEach(group => {\r\n\t\t\tgroup.id = replaceUnderscores(group.id);\r\n\t\t\tgroup.virtual_services.forEach(service => {\r\n\t\t\t\tservice.id = replaceUnderscores(service.id);\r\n\t\t\t});\r\n\t\t});\r\n\t\tif (debugJenkins) console.log(groups);\r\n\t\tthis.setState({groups: groups});\r\n\r\n\t\tvar serviceStats = {\r\n\t\t\tup: 0,\r\n\t\t\tdown: 0,\r\n\t\t}\r\n\t\tvar serverStats = {\r\n\t\t\tup: 0,\r\n\t\t\tdisabled: 0,\r\n\t\t\tdown: 0,\r\n\t\t}\r\n\t\tthis.setState({ downedServices: [] });\r\n\t\tif (simulateDownedService) groups[8].virtual_services[3].servers[1].operational_status = \"out-of-service-health\";\r\n\t\tgroups.forEach(group => {\r\n\t\t\tgroup.virtual_services.forEach(service => {\r\n\t\t\t\tif (this.checkIfServiceIsDown(service)) {\r\n\t\t\t\t\tservice.status = \"down\";\r\n\t\t\t\t\tserviceStats.down += 1;\r\n\t\t\t\t\tthis.setState({ downedServices: [...this.state.downedServices, service] });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tservice.status = \"up\";\r\n\t\t\t\t\tserviceStats.up += 1;\r\n\t\t\t\t}\r\n\t\t\t\tservice.jenkinsJobs = [];\r\n\t\t\t\tservice.servers.forEach(server => {\r\n\t\t\t\t\tif (server.operational_status === \"enable\") { serverStats.up += 1; } \r\n\t\t\t\t\telse if (server.operational_status === \"disable\") { serverStats.disabled += 1; }\r\n\t\t\t\t\telse if (server.operational_status === \"out-of-service-health\") { serverStats.down += 1; }\r\n\t\t\t\t\telse { console.warn(\"Unexpected server status\", server.operational_status); }\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t\t\t\r\n\t\tthis.setState({ serviceStats: serviceStats, serverStats: serverStats }, callback);\r\n\t}\r\n\tgetJenkinsStatus() {\r\n\t\treturn fetch(jenkinsUrl)\r\n\t\t.then(response => {\r\n\t\t\tif (response.ok) {\r\n\t\t\t\treturn response.json();\r\n\t\t\t} else {\r\n\t\t\t\tthis.handleNetworkErr(response);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tprocessJenkinsData(jobs) {\r\n\t\tconst parenthesizeLastWord = phrase => { // put parens around the last word in a phrase\r\n\t\t\tlet arr = phrase.split(' ');\r\n\t\t\tlet lastWord = arr.pop();\r\n\t\t\tarr.push(`(${lastWord})`);\r\n\t\t\treturn arr.join(' ');\r\n\t\t}\r\n\t\t// match jobs from Jenkins with services from Load Balancer\r\n\t\tthis.setState(function(state) {\r\n\t\t\tconst groups = state.groups;\r\n\t\t\tconst unmatchedJobs = [];\r\n\t\t\tconst textInBrackets = /\\[(.+?)\\]/g;\r\n\t\t\tlet jobsMatched = 0;\r\n\t\t\tstate.timestamps = [];\r\n\t\t\twhile (jobs.length > 0) {\r\n\t\t\t\tconst job = jobs.pop();\r\n\t\t\t\tlet jobMatched = false;\r\n\t\t\t\tif (job.color === \"disabled\") continue;\r\n\t\t\t\tgroups.forEach(group => { // eslint-disable-line\r\n\t\t\t\t\tgroup.virtual_services.forEach(service => {\r\n\t\t\t\t\t\tlet matches;\r\n\t\t\t\t\t\tconst regexResults = [];\r\n\t\t\t\t\t\twhile (matches = textInBrackets.exec(job.description)) { // eslint-disable-line\r\n\t\t\t\t\t\t\tregexResults.push(matches[1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst serviceIdInJobDescription = regexResults && regexResults.some(result => result === service.id);\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tjob.name === service.id || \r\n\t\t\t\t\t\t\tjob.name === parenthesizeLastWord(service.id) || \r\n\t\t\t\t\t\t\tjob.name === service.id.replace('UAT', 'Staging') ||\r\n\t\t\t\t\t\t\tjob.name === service.id.replace('UAT', '(Staging)') || \r\n\t\t\t\t\t\t\tserviceIdInJobDescription \r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t// console.log(\"Matched service\", service.id, \"with job\", job.name);\r\n\t\t\t\t\t\t\tservice.jenkinsJobs.push(job);\r\n\t\t\t\t\t\t\tjobMatched = true;\r\n\t\t\t\t\t\t\tif (debugJenkins) { jobsMatched += 1; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\tif (!jobMatched) {\r\n\t\t\t\t\tunmatchedJobs.push(job);\r\n\t\t\t\t}\r\n\t\t\t\tif (job.builds.length) {\r\n\t\t\t\t\tlet timestamp = job.builds[0].timestamp;\r\n\t\t\t\t\tstate.timestamps.push(timestamp);\r\n\t\t\t\t\tstate.jobsByTimestamp[timestamp] = job;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (debugJenkins) {\r\n\t\t\t\tconsole.log(\"Matched\", jobsMatched, \"Jenkins jobs with Load Balancer services\");\r\n\t\t\t\tconsole.log(\"Unmatched jobs:\", unmatchedJobs.map(job => job.name));\r\n\t\t\t}\r\n\t\t\tstate.timestamps.sort();\r\n\t\t\tstate.timestamps.reverse();\r\n\t\t\tstate.timestamps = state.timestamps.slice(0, numJenkinsBuildsToShow);\r\n\t\t\t\r\n\t\t});\t\t\r\n\t}\r\n\thandleNetworkErr(err) {\r\n\t\tthis.setState({\r\n\t\t\tnetworkText: err.message,\r\n\t\t\tgroups: [],\r\n\t\t});\r\n\t\treturn err;\r\n\t}\r\n\trender() {\r\n\t\tvar groups = this.state.groups.map((group, index) => { return <Group key={index} group={group} /> });\r\n\t\tif (groups.length === 0) {\r\n\t\t\tgroups = <div className=\"network-text\">{this.state.networkText}</div>\r\n\t\t}\r\n\t\tvar downedServices = this.state.downedServices.map(service => <DownedService service={service} key={service.id} />);\r\n\t\tvar progressbarPercentage = this.state.timeSinceLastUpdate * 100/updateFrequency;\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div id=\"App\">\r\n\t\t\t\t<div className=\"monitor\">\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<ul className=\"groups\">\r\n\t\t\t\t\t\t\t{groups}\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<div id=\"network-status\" className={this.state.networkStatus} onClick={this.fetchLoopController().stop}>\r\n\t\t\t\t\t\t\t<CircularProgressbar percentage={progressbarPercentage} styles={{\r\n\t\t\t\t\t\t\t\tpath: { \r\n\t\t\t\t\t\t\t\t\tstroke: 'lime',\r\n\t\t\t\t\t\t\t\t\tstrokeWidth: '.05em',\r\n\t\t\t\t\t\t\t\t\tstrokeLinecap: 'butt',\r\n\t\t\t\t\t\t\t\t\tstrokeDasharray: '4'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\ttrail: {\r\n\t\t\t\t\t\t\t\t\tstroke: 'hsl(0, 0%, 10%)',\r\n\t\t\t\t\t\t\t\t\tstrokeWidth: '0.05em',\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"stats\">\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<div className=\"stat-line stat-line-green\">\r\n\t\t\t\t\t\t\t<strong>UP: </strong>\r\n\t\t\t\t\t\t\t<span className=\"half-circle green\"></span>\r\n\t\t\t\t\t\t\t<span>{this.state.serviceStats.up} services,</span>\r\n\t\t\t\t\t\t\t<span className=\"square green\"></span>\r\n\t\t\t\t\t\t\t<span>{this.state.serverStats.up} servers</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"stat-line stat-line-grey\">\r\n\t\t\t\t\t\t\t<strong>DISABLED: </strong>\r\n\t\t\t\t\t\t\t<span className=\"square grey\"></span>\r\n\t\t\t\t\t\t\t<span>{this.state.serverStats.disabled} servers</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"downed\">\r\n\t\t\t\t\t\t\t<div className=\"stat-line stat-line-red\">\r\n\t\t\t\t\t\t\t\t{simulateDownedService && <strong>**SIMULATED**<br/></strong>}\r\n\t\t\t\t\t\t\t\t<strong>DOWN: </strong>\r\n\t\t\t\t\t\t\t\t<span className=\"half-circle red\"></span>\r\n\t\t\t\t\t\t\t\t<span>{this.state.serviceStats.down} services,</span>\r\n\t\t\t\t\t\t\t\t<span className=\"square red\"></span>\r\n\t\t\t\t\t\t\t\t<span>{this.state.serverStats.down} servers</span>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"downed-services\">\r\n\t\t\t\t\t\t\t\t{downedServices}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t{ this.state.showLegend && \r\n\t\t\t\t\t\t<div className=\"legend\">\r\n\t\t\t\t\t\t\t<h2>Legend</h2>\r\n\t\t\t\t\t\t\t<img src=\"/sites-monitor/legend.svg\" alt=\"legend\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<JenkinsLog timestamps={this.state.timestamps} jobsByTimestamp={this.state.jobsByTimestamp} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst Group = props => {\r\n\tvar systems = props.group.virtual_services.map(system => <System key={system.name} system={system} debugJenkins={debugJenkins} serverColors={serverColors} />);\r\n\treturn (\r\n\t\t<li className=\"group\">\r\n\t\t\t{props.group.id}\r\n\t\t\t{systems}\r\n\t\t</li>\r\n\t)\r\n};\r\n\r\nclass DownedService extends Component {\r\n\trender() {\r\n\t\tvar servers = this.props.service.servers.map(server => <div className=\"server indent\" key={server.id}>\r\n\t\t\t\t<div className={\"square \" + serverColors[server.operational_status]}></div>\r\n\t\t\t\t<div className=\"server-name\">{server.id}</div>\r\n\t\t</div>)\r\n\t\treturn <div className=\"downed-service\">\r\n\t\t\t<div className=\"red circle\"></div>\r\n\t\t\t<div className=\"downed-service-name\">{this.props.service.id}</div>\r\n\t\t\t<div>\r\n\t\t\t\t{servers}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}